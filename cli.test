# Alias the CLI command to test before running the tests.
# E.g. `wolframscript -c` or `woxi eval`
#
# $ cat /bin/wo
# #! /usr/bin/env bash
# wolframscript -c "$*"

$ wo '1+2'
3

$ wo 'Prime[5]'
11

$ wo 'Print["Hello World!"]'
Hello World!
Null

$ wo '#^2 &[{1, 2, 3}]'
{1, 4, 9}

# # Map (/@): Applies a function to each element of a list.
# $ wo 'f /@ {1, 2, 3}'
# {f[1], f[2], f[3]}
#
# # Apply (@@): Replaces the head of an expression with a function.
# $ wo 'f @@ {1, 2, 3}'
# f[1, 2, 3]
#
# # Fold (Fold): Applies a function cumulatively to elements of a list,
# # starting with an initial value.
# $ wo 'Fold[Plus, 0, {1, 2, 3}]'
# 6
#
# # FoldList (FoldList): Like Fold, but returns a list of intermediate results.
# $ wo 'FoldList[Plus, 0, {1, 2, 3}]'
# {0, 1, 3, 6}
#
# # Nest (Nest): Applies a function repeatedly to an expression.
# $ wo 'Nest[f, x, 3]'
# f[f[f[x]]]
#
# # NestList (NestList): Like Nest, but returns a list of intermediate results.
# $ wo 'NestList[f, x, 3]'
# {x, f[x], f[f[x]], f[f[f[x]]]}
#
# # Select (Select): Picks elements of a list that satisfy a criterion.
# $ wo 'Select[{1, 2, 3, 4}, EvenQ]'
# {2, 4}
#
# # Cases (Cases): Extracts elements from an expression that match a pattern.
# $ wo 'Cases[{a, b, a}, a]'
# {a, a}
#
# # DeleteCases (DeleteCases):
# # Removes elements from an expression that match a pattern.
# $ wo 'DeleteCases[{a, b, a}, a]'
# {b}
#
# # ReplaceAll (/.): Replaces parts of an expression according to rules.
# $ wo '{a, b} /. a -> x'
# {x, b}
#
# # ReplaceRepeated (//.):
# # Repeatedly applies transformation rules until no more changes occur.
# $ wo 'ReplaceRepeated[f[2] -> 2][f[f[f[f[2]]]]]'
# 2
#
# $ wo 'f[f[f[f[2]]]] //. f[2] -> 2'
# 2
#
# # MapThread (MapThread):
# # Applies a function to corresponding elements in several lists.
# $ wo 'MapThread[Plus, {{1, 2}, {3, 4}}]'
# {4, 6}
#
# # Flatten (Flatten): Flattens nested lists.
# $ wo 'Flatten[{{1}, {2, 3}}]'
# {1, 2, 3}
#
# # Partition (Partition): Breaks a list into smaller sublists.
# $ wo 'Partition[{1, 2, 3, 4}, 2]'
# {{1, 2}, {3, 4}}
#
# # SortBy (SortBy): Sorts elements of a list according to a function.
# $ wo 'SortBy[{3, 1, 2}, # &]'
# {1, 2, 3}
#
# # First: Returns the first element of a list.
# $ wo 'First[{1, 2, 3}]'
# 1
#
# # GroupBy (GroupBy): Groups elements of a list according to a function.
# $  wo 'GroupBy[{{a, b}, {a, c}, {b, c}}, First]'
# > /<|a -> {{a, b}, {a, c}}, b -> {{b, c}}|>/
#
# # Total (Total): Sums the elements of a list.
# $ wo 'Total[{1, 2, 3}]'
# 6
#
# # Accumulate (Accumulate): Returns the cumulative sums of a list.
# $ wo 'Accumulate[{1, 2, 3}]'
# {1, 3, 6}
#
# # Array (Array): Constructs an array using a function to generate elements.
# $ wo 'Array[#^2 &, 3]'
# {1, 4, 9}
